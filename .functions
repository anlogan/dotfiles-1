#!/bin/bash

calc() {
  echo "scale=3; $*" | bc
}

cget() {
  curl -fJOL --compressed "$@"
}

cg2dot() {
  { type -P gprof2dot || type -P dot; } &>/dev/null || return 1
  (( $# == 2 )) || { echo "Usage: $FUNCNAME: <input> <output>"; return 1; }
  gprof2dot --format=callgrind $1 | dot -T${2##*.} -o "$2"
}

confpac() {
  [[ -f autogen.sh ]] || return 1
  ./autogen.sh
  ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --enable-git-version --enable-debug "$@"
  for path in lib/libalpm src/{pacman,util}; do
    ln -sf ../../config.h $path/config.h
  done
}

pushd() {
  builtin pushd "${@:-$HOME}"
}

./configure() {
  if [[ -x /bin/dash ]]; then
    CONFIG_SHELL=/bin/dash /bin/dash ./configure CONFIG_SHELL=/bin/dash "$@"
  else
    command ./configure "$@"
  fi
}

ddprogress() {
  local pid= t=0

  dd "$@" &
  pid=$!

  while kill -0 "$pid"; do
    sleep 5s
    (( t += 5 ))
    if (( ! t % 60 )); then
      kill -USR1 "$pid" || break
    fi
  done
}

debugflags() {
  local -a flags cppflags ldflags

  cflags=(-pedantic -Wall -Wextra -Wclobbered -Wempty-body -Wfloat-equal
          -Wignored-qualifiers -Wmissing-declarations -Wmissing-parameter-type
          -Wsign-compare -Wmissing-prototypes -Wold-style-declaration
          -fstack-protector-all -Wtype-limits -Woverride-init
          -Wstrict-prototypes -Wuninitialized)
  cppflags=(-D_FORTIFY_SOURCE=2)

  # lulz
  for flagarr in {c,cpp,ld}flags; do
    eval "${flagarr^^}=\${${flagarr}[*]}"
  done

  export {LD,C{,PP}}FLAGS
}

deps() {
  local bin dir
  if [[ -f "$1" ]]; then
    bin=$1
  elif bin=$(type -P $1); then
    :
  else
    # maybe its a lib?
    for dir in /lib /usr/lib; do
      if [[ -f $dir/$1 ]]; then
        bin=$dir/$1
        break
      fi
    done
  fi

  if [[ $bin && $1 != $bin ]]; then
    printf '%s => %s\n\n' "$1" "$bin"
  fi

  [[ -z $bin ]] && { echo "error: binary not found: $1"; return 1; }
  objdump -p "$bin" | awk '/NEEDED/ { print $2 }'
}

depscan() {
  [[ -z $1 ]] && { echo "usage: depscan <package>"; return; }
  while read elfobj; do
    objdump -p "$elfobj" | awk '/NEEDED/ { print $2 }'
  done < <(file $(pacman -Qlq $1) | sed -n '/ELF/s/^\(.*\):.*/\1/p') | nl
}

down() {
  local OPTIND=0 flag= match= pred=
  local -i i=0 first=0
  local -a matches

  _goto() {
    if [[ -d $1 ]]; then
      cd "$1"
    else
      cd "${1%/*}"
    fi
  }

  while getopts 'bcdflps1' flag; do
    case $flag in
      b|c|d|f|l|p|s) pred="-type ${1#-}" ;;
      1) first=1 ;;
      *) return 1 ;;
    esac
  done
  shift $(( OPTIND - 1 ))

  # sort by depth
  while IFS=$'\t' read -r _ match; do
    matches[++i]=$match
  done< <(find . $pred -name "$1" | awk -F'/' '{ printf "%s\t%s\n",NF,$0 }' | sort -n)

  if (( ! ${#matches[*]} )); then
    echo "no matches"
    return 1
  fi

  if (( i == 1 || first )); then
    _goto "${matches[1]}"
  else
    if (( $# == 1 )); then
      i=0
      for match in "${matches[@]}"; do
        (( ++i ))
        printf '%d) %s%s\n' "$i" "${matches[i]}" "$([[ -d ${matches[i]} ]] && printf '/')"
      done
    else
      if (( $2 > i )); then
        return 1
      fi
      _goto "${matches[$2]}"
    fi
  fi
}

ex() {
  if [[ -f $1 ]]; then
    case $1 in
      *.@(tar|tbz2|tgz|txz|rpm)?(.bz2|.gz|.xz))
                           bsdtar xvf "$1"  ;;
      *.bz2)               bzip2 -d "$1"    ;;
      *.rar)               unrar x "$1"     ;;
      *.gz)                gzip -d "$1"     ;;
      *.lzma)              xz -d "$1"       ;;
      *.zip)               unzip "$1"       ;;
      *.Z)                 uncompress "$1"  ;;
      *.7z)                7z x "$1"        ;;
      *.exe)               cabextract "$1"  ;;
      *)                   echo "'$1': unrecognized file compression" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

ghclone() {
  local user= repo=

  if (( ! $# )); then
    printf "Usage: ghclone [-p] user repo\n"
    return 1
  fi

  if [[ $1 = -p ]]; then
    prefix=git@github.com:
    shift
  else
    prefix=git://github.com/
  fi

  user=$1 repo=$2
  git clone "$prefix$user/$repo"
}

hex2dec() {
  printf "%d\n" 0x$1
}

hex2ip() {
  printf '%d.%d.%d.%d\n' \
    $(( 0x${1:6:2} )) \
    $(( 0x${1:4:2} )) \
    $(( 0x${1:2:2} )) \
    $(( 0x${1:0:2} ))
}

kc() {
  eval $(keychain --eval id_rsa)
}

kopt() {
  [[ $1 ]] || return 1
  declare -u opt=$1
  zgrep "$opt" /proc/config.gz
}

ljoin() {
  [[ $1 ]] || { echo "usage: ljoin IFS args..."; return 1; } >&2
  ( IFS=$1; echo "${*:2}" )
}

longest() {
  awk '
  BEGIN {
    linecount = 0
    maxlen = 0
    line = ""
  }
  {
    len = length($0)
    if(len > maxlen) {
      maxlen = len
      line = $0
    }
  }
  END {
    if(linecount > 0) {
      printf "%d\t%d\n", maxlen, line
    }
  }
  ' < ${1:-/dev/stdin}
}

mak() {
  if [[ ! -f Makefile ]]; then
    local -a src=(*.c)
    make "${src[@]%.c}" "$@"
  else
    make "$@"
  fi
}

man2pdf() {
  local manpage out

  [[ $1 ]] || { echo "usage: man2pdf <manpage>"; return 1; }>&2

  if manpage=$(man -w "$1"); then
    out=/tmp/$1.pdf
    [[ -e $out ]] || man -t $1 | ps2pdf - > $out
    [[ -e $out ]] && xo $out
  else
    echo "ERROR: manpage \"$1\" not found."
  fi
}

mkcd() {
  [[ $1 ]] || return 0
  [[ -d $1 ]] || mkdir -vp "$1"
  [[ -d $1 ]] && builtin cd "$1"
}

rlatest() {
  local count=${2:-1}

  find "${1:-.}" -type f -printf '%T@ %p\0' | sort -znr | {
    while (( count-- )); do
      read -rd ' ' _
      IFS= read -rd '' file
      printf '%s\n' "$file"
    done
  }
}

sprunge() {
  curl -sF "sprunge=<${1:--}" 'http://sprunge.us'
}

sdstat() {
  local -a services

  for serv; do
    [[ $serv = *.@(service|device|socket|path|target|?(auto)mount) ]] || serv+='.service'
    services+=("$serv")
  done

  systemctl status "${services[@]}"
}

svnrm() {
  svn up --set-depth exclude "$@" && rm -rf "$@"
}

t() {
  tmux -L main "${@:-attach}"
}

unwork() {
  if [[ -z $1 ]]; then
    echo "usage: unwork <dirname>"
    return 1
  fi

  if [[ -d $1 ]]; then
    local count
    read count < <(find "$1" -type d -name '.svn' -printf 'foo\n' -exec rm -rf {} + | wc -l)
    if [[ $? != 0 ]]; then
      echo "Error occurred. Nothing done." >&2
    elif [[ $count = 0 ]]; then
      echo "Nothing done."
    else
      echo "SUCCESS. Directory is no longer a working copy ($count .svns removed)."
    fi
  else
    echo "ERROR: $1 is not a directory"
  fi
}

up() {
  local cdinto=0 x= traverse= curpath=

  [[ $1 ]] || { cd ..; return; } # default to 1 level
  [[ $1 = -d ]] && { cdinto=1; shift; }

  for x; do
    if [[ $x == +([[:digit:]]) ]]; then
      (( x == 0 )) && return # noop

      # build a path to avoid munging OLDPWD
      while (( x-- )); do
        traverse+=../
      done

      cd "$traverse"
    else
      curpath=$PWD

      while [[ $curpath && ! -e $curpath/$x ]]; do
        curpath=${curpath%/*}
      done

      if [[ $curpath ]]; then
        if [[ $curpath != "$PWD" ]]; then
          if (( cdinto )); then
            cd "$curpath/$x"
          else
            cd "$curpath"
          fi
        fi
      else
        printf "error: failed to locate \`%s' in a parent directory\n" "$x"
        return 1
      fi
    fi
  done
}

urlencode() {
  local i= char= url=$*
  declare -i len=${#url}

  for (( i = 0; i < len; i++ )); do
    char=${url:i:1}
    case "$char" in
      [a-zA-Z0-9.~_-]) printf "$char" ;;
      ' ') printf + ;;
      *) printf '%%%X' "'$char" ;;
    esac
  done
}

xclipc() {
  xclip -selection clipboard "$@"
}

xkbreset() {
  [[ $DISPLAY ]] || return 1
  eval $(grep 'xset r rate' ~/.xsession)
  eval $(grep 'terminate' ~/.xsession)
}

xs() {
  xclip -o | sprunge
}

# vim: syn=sh ft=sh et
